include:
  - project: "waldur/waldur-pipelines"
    file: "/templates/stages.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/check-merge-compatibility.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-md-files.yml"

Run linter:
  image:
    name: "registry.hpc.ut.ee/mirror/alpine/helm:3.12.3"
    entrypoint: [""]
  stage: test
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: $CI_COMMIT_TAG
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - apk update
    - apk add jq python3
    - apk add -X http://dl-cdn.alpinelinux.org/alpine/edge/community -u alpine-keys
    - apk add yq --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
  script:
    - helm dependency update waldur/
    - helm lint waldur/
    - helm lint waldur/ -f waldur/test/values.yaml
    # lint for correctness of known configuration
    - mkdir rendered-templates && helm template waldur -f waldur/test/values.yaml --output-dir rendered-templates/ --debug
    - yq e '.data."features.json"' rendered-templates/waldur/templates/config-features-json.yml | jq
    - yq e '.data."override.conf.py"' rendered-templates/waldur/templates/config-override.yaml > rendered-templates/waldur/templates/override.conf.py
    - python3 -m py_compile rendered-templates/waldur/templates/override.conf.py
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - rendered-templates

.Test template:
  image: $HELM_TEST_IMAGE
  stage: test
  interruptible: true
  before_script:
    - export KUBECONFIG=${K8S_CONFIG_WALDUR_HELM_TEST}
    - apk update
    - apk add curl git
    - kubectl config view
    - kubectl config current-context
    - helm repo add stable https://charts.helm.sh/stable
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - helm repo update
    - helm dependency update waldur/

.Cleanup template:
  image: $HELM_TEST_IMAGE
  script:
    - export KUBECONFIG=${K8S_CONFIG_WALDUR_HELM_TEST}
    - helm uninstall waldur || true
    - kubectl delete job waldur-mastermind-initdb-job || true
    - kubectl delete job waldur-bootstrap-job || true

Validate release installation (dry-run):
  extends: .Test template
  rules:
    - if: '$SKIP_TESTS == "true"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: $CI_COMMIT_TAG
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - helm install waldur waldur/ -f waldur/test/values.yaml --dry-run --debug

Test release installation and readiness:
  extends: .Test template
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'
    - if: $TRIGGER_PROJECT_NAME
  script:
    - helm dep update waldur/
    - helm install waldur waldur/ --wait -f waldur/test/values.yaml --timeout 10m0s
  after_script:
    - export KUBECONFIG=${K8S_CONFIG_WALDUR_HELM_TEST}
    - helm list
    - kubectl get pods
    - |
      for NAME in $(kubectl get pods --field-selector status.phase=Failed -o name); do
        echo "Pod name: $NAME"
        kubectl logs $NAME --tail 100 --all-containers
        echo ----
      done

.Test ArgoCD template:
  image: registry.hpc.ut.ee/iljatest/docker:24.0.6
  variables:
    APPLICATION_NAME: waldur-helm-$CI_MERGE_REQUEST_IID
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - echo 'PasswordAuthentication no' >> /etc/ssh/ssh_config
    - cat /etc/ssh/ssh_config
    - SSH_COMMAND="ssh -i .ssh/id_waldur_dev_ssh_pkey -o PasswordAuthentication=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null rocky@172.17.89.30"
    - SCP_COMMAND="scp -i .ssh/id_waldur_dev_ssh_pkey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    - mkdir -p .ssh
    - cp -vf $WALDUR_DEV_SSH_PKEY .ssh/id_waldur_dev_ssh_pkey
    - cp -vf $WALDUR_DEV_SSH_PUBKEY .ssh/id_waldur_dev_ssh_pkey.pub
    - chmod 600 .ssh/id_waldur_dev_ssh_pkey
  after_script:
    - rm -fv .ssh/id_waldur_dev_ssh_pkey .ssh/id_waldur_dev_ssh_pkey.pub

Test ArgoCD sync:
  extends: .Test ArgoCD template
  stage: test
  script:
    - $SSH_COMMAND "argocd login 10.43.40.117:80 --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --name default --insecure"
    - $SSH_COMMAND "argocd account get-user-info"
    - $SSH_COMMAND "argocd app list"
    - $SSH_COMMAND "argocd repo add https://code.opennodecloud.com/waldur/waldur-helm.git --username gitlab-ci-token --password $CI_JOB_TOKEN --upsert"
    - $SSH_COMMAND "argocd app sync $APPLICATION_NAME --timeout 2400"
    - $SSH_COMMAND "argocd app wait $APPLICATION_NAME"
    - $SSH_COMMAND "argocd repo rm https://code.opennodecloud.com/waldur/waldur-helm.git"

Stop argocd app:
  extends: .Test ArgoCD template
  stage: .pre
  script:
    - $SSH_COMMAND "argocd app delete $APPLICATION_NAME"
    # There is no option to wait until application is deleted
    # Also, argocd doesn't delete an application record, it changes state to "Missing" instead
    - sleep 5s
  allow_failure: true

Cleanup previous test deployment:
  extends: .Cleanup template
  stage: .pre
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'

Upload docs:
  image:
    name: registry.hpc.ut.ee/mirror/alpine/git:v2.30.2
    entrypoint: [""]
  stage: deploy
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'
  script:
    - cd /tmp/
    - git clone "https://gitlab-ci-token:$GITLAB_TOKEN@$CI_SERVER_HOST/waldur/waldur-docs.git"
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - cd waldur-docs/
    - cp -v $CI_PROJECT_DIR/README.md docs/admin-guide/deployment/helm/index.md
    - cp -rv $CI_PROJECT_DIR/docs/ docs/admin-guide/deployment/helm/
    - git add docs/admin-guide/deployment/helm/
    - git commit -m 'Update Waldur Helm docs' || exit 0
    - git branch new-configuration-guide
    - git push --set-upstream origin new-configuration-guide:master

Publish new chart version and update docs on github:
  image:
    name: registry.hpc.ut.ee/mirror/alpine/helm:3.11.2
    entrypoint: [""]
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  script:
    # Configure git
    - git remote -v
    - git remote remove github-origin || true # Cleanup previous session
    - git remote add github-origin https://opennode-jenkins:$OPENNODE_JENKINS_GITHUB_TOKEN@github.com/waldur/waldur-helm.git
    - git remote -v
    - git config user.name "Opennode Jenkins"
    - git config user.email jenkins@opennodecloud.com
    - git fetch github-origin
    # Add version-specific docs
    - cp README.md waldur/
    - cp -r docs/ waldur/
    # Add correct version to Chart.yaml
    - |
      sed -i -E -e "s/^version: ('.*'|.*)$/version: $CI_COMMIT_TAG/" waldur/Chart.yaml
    - |
      sed -i -E -e "s/^appVersion: ('.*'|.*)$/appVersion: \"$CI_COMMIT_TAG\"/" waldur/Chart.yaml
    - |
      sed -i -E -e "s/^  imageTag: \"latest\"$/  imageTag: \"$CI_COMMIT_TAG\"/" waldur/values.yaml
    # Package Waldur chart with a new version
    - helm dependency update waldur/
    - helm package waldur/
    - ls waldur-*.tgz
    - git status
    - git stash
    # Checkout to gh-pages branch
    - git checkout gh-pages
    - git pull github-origin gh-pages
    # Update docs
    - git checkout $CI_COMMIT_TAG -- README.md
    - git checkout $CI_COMMIT_TAG -- docs/
    - git add README.md
    - git add docs/
    # Move archive to directory and update index
    - mkdir charts/ || true
    - mv waldur-$CI_COMMIT_TAG.tgz charts/
    - helm repo index .
    - git add charts/
    - git add index.yaml
    # Push changes
    - git status
    - git commit -m "Release $CI_COMMIT_TAG"
    - git push github-origin gh-pages
