# Default values for waldur.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount:
  homeport: 1
  api: 2
  worker: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

apiScheme: "https"
homeportScheme: "https"
apiHostname: "helm-testing.waldur.com"
apiExtraHosts:
  - helm-testing-02.waldur.com
homeportHostname: "helm-testing.waldur.com"
homeportExtraHosts:
  - helm-testing-02.waldur.com

affinity: {}

apiResources:
  requests:
    memory: 2000Mi
    cpu: 1000m
  limits:
    memory: 4000Mi
    cpu: 2000m

workerResources:
  requests:
    memory: 2000Mi
    cpu: 1000m
  limits:
    memory: 4000Mi
    cpu: 2000m

homeportResources:
  requests:
    memory: 1000Mi
    cpu: 500m
  limits:
    memory: 2000Mi
    cpu: 1000m

beatResources:
  requests:
    memory: 500Mi
    cpu: 250m
  limits:
    memory: 1000Mi
    cpu: 500m

hpa:
  api:
    enabled: false
    resources:
      requests:
        cpu: 500m
    cpuUtilizationBorder: 70
  celery:
    enabled: false
    workerResources:
      requests:
        cpu: 2000m
    beatResources:
      requests:
        cpu: 300m
    cpuUtilizationBorder: 80

nodeSelector: {}

tolerations: []

ingress:
  tls:
    enabled: true
    source: "secret" # Possible values: `letsEncrypt` and `secret`
    customMastermindSecretName: ""
    customHomeportSecretName: ""
    secretsDir: "tls"  # Enabled only if source == `secret`
  whitelistSourceRange: '172.17.36.95/32,172.17.152.13/32,172.18.4.16/32,172.18.130.4/32,172.17.36.92/32,172.18.4.31/32,217.159.213.82/32,172.18.128.78/32,172.17.36.8/32,172.17.152.11/32,172.18.128.77/32,172.18.64.0/24'
  whitelistSourceRangeAdmin: '172.17.36.95/32,172.17.152.13/32,172.18.4.16/32,172.18.130.4/32,172.17.36.92/32,172.18.4.31/32,217.159.213.82/32,172.18.128.78/32,172.18.64.0/24'

celery:
  worker:
    enabled: true

proxy:
  httpsProxy: ""
  httpProxy: ""
  noProxy: ""

hostAliases:
  - ip: "1.2.3.4"
    hostnames:
      - "my.host.example.com"

waldur:
  imageName: "opennode/waldur-mastermind"
  imageTag: "latest"
  initdbEnabled: true
  initdbImageName: "bitnami/postgresql"
  pullPolicy: Always
  secretKey: "SecretKeyChangeMe"
  secretKeyExistingSecret:
    name: ""
    key: ""
  supportToken: "support-token"
  staffToken: "staff-token"
  debug: true
  mail:
    host: "test.email.waldur.example.com"
    port: "1055"
    username: "email-username"
    password: "email-password"
    useTLS: "false"
    useSSL: "false"
    from: "noreply@test.email.waldur.example.com"
    hookFrom: ""
    replyTo: "reply@test.email.waldur.example.com"
  notificationSubject: "Test subject"
  timeZone: "UTC"
  features:
    - support
    - invitation_use_webhooks
    - protect_keycloak_user_details
  currencyName: "EUR"
  mastermindUrl: "http://waldur.example.com/"
  site:
    name: "Waldur"
    logo: "icons/login_logo.png"
    address: "Example address"
    email: "waldur@example.com"
    phone: "test phone"
  defaultLanguage: "en"
  languageChoices:
    - en
    - et
    - lt
    - lv
    - ru
    - it
    - de
    - da
    - sv
    - es
    - fr
    - nb
    - ar
    - cs
  disabledRoles:
    - customer_manager
    - customer_support
  authMethods:
    - LOCAL_SIGNIN
    - LDAP
    - SAML2
    - VALIMO
  socialAuthMethods: []
  localIdp:
    name: "Local IDP"
    label: "Local IDP label"
    managementUrl: ""
    protectedFields: []
  defaultIdp: ""
  eduteams:
    remoteRefreshToken: ""
    remoteClientID: ""
    remoteSecret: ""
    remoteUserinfoUrl: ""
    remoteTokenUrl: ""
    enableSync: false
  ldap:
    host: "ldap://ipa.address"
    baseDN: "cn=accounts,dc=demo1,dc=freeipa,dc=org"
    userDN: "cn=users,cn=accounts,dc=demo1,dc=freeipa,dc=org"
    user: "wladur"
    password: "ldap-secret"
    admins: "cn=admins,"
    support: "cn=support,"
  freeipa:
    hostname: "ipa.address"
    password: "freeipa-secret"
    username: "waldur"
    verifySSL: "false"
    groupnamePrefix: "pref_"
    usernamePrefix: "pref_"
  valimo:
    dir: "test/waldur_valimo"
    valimoClientKey: "client key"
    valimoClientCrt: "client cert"
    apId: ""
    apPwd: ""
    dnsname: ""
    url: ""
    signatureProfile: ""
    label: ""
    mobilePrefix: ""
    managementUrl: ""
    protectedFields: []
  paypal:
    secret: ""
    clientId: ""
  invoice:
    company: ""
    address: ""
    country: ""
    email: ""
    postalCode: ""
    phoneCountryCode: ""
    phoneNationalNumber: ""
    bank: ""
    bankAccount: ""
    vatCode: ""
    paymentInterval: ""
  invoice_reporting:
    enabled: true
    email: "client@waldur.example.com"
    sap_params:
      km_kood: "1"
      org_code: "CODE"
      makset: "ZO00"
      funka: "1111"
      fund: "11"
      eeluks: "EE00"
      kuluuksus: "KNA00"
  slurm:
    customerPrefix: "test_cst_"
    projectPrefix: "test_pr_"
    allocationPrefix: "test_alloc"
  support:
    backend: "zammad" # Can be "atlassian", "zammad" or "smax"
    atlassian:
      servicedeskEmail: "waldur@example.com"
      servicedeskToken: "support-token"
      servicedeskUsername: ""
      servicedeskPassword: ""
      servicedeskUrl: "https://sd-url/"
      skipVerify: true
      organizationField: "Reporter organization"
      projectKey: "WAL"
      useAutomaticRequestMapping: false
      legacy: true
    zammad:
      apiUrl: "https://zammad.example.com/api/"
      token: "3423412341234123"
      group: "default-group"
      articleType: "email"
      commentCooldownDuration: 7
    smax:
      apiUrl: "https://smax.example.com/api/"
      tenantId: "123456789"
      login: "user@example.com"
      password: "password"
      organisationField: ""
      projectField: ""
      affectedResourceField: ""
      timesToPull: 10
      secondsToWait: 1
      creationSourceName: ""
      requestsOffering: ""
      verifySSL: True
  marketplace:
    notify_staff: false
    script:
      enabled: true
      dockerImages:
        python: "opennode/python-script-runner:0.1.1"
        shell: "alpine:3"
      kubeconfigPath: "test/k8s/kubeconfig"
      kubeconfig: |
        test content
        for multiline kubeconfig
      k8sNamespace: "default"
      jobTimeout: 1800
  pid_datacite:
    repository_id: "repo.test"
    password: "datacite-pid"
    prefix: "11.11111"
    url: "https://datacite-url/dois"
    publisher: "WaldurTest"
    collection_doi: ""
  sentryDSN: "https://public@sentry.example.com/1"
  whitelabeling:
    shortPageTitle: "Waldur Helm Test"
    modePageTitle: "Waldur Helm Test"
    loginLogoPath: "test/images/waldur-login-logo.png"
    sidebarLogoPath: "test/images/waldur-sidebar-logo.png"
    sidebarLogoDarkPath: "test/images/waldur-sidebar-logo.png"
    sidebarStyle: "dark"
    disableDarkTheme: false
    poweredByLogoPath: "test/images/waldur-powered-by-logo.png"
    faviconPath: "test/images/waldur-favicon.png"
    tosHtmlPath: "test/files/tos.html"
    brandColor: ""
    brandLabelColor: ""
    heroImagePath: "" # keep the default one, because the image is too large (~541 KB)
    heroLinkLabel: ""
    heroLinkUrl: ""
    privacyHtmlPath: "test/files/privacy.html"
    siteDescription: "Waldur Helm Test"
    supportPortalLink: "https://docs.waldur.com"
    tosHtml: |
      <html>
      TOS
      </html>
    privacyHtml: |
      <html>
      Privacy
      </html>
    autoApproveUserTOS: false
  customInvitations:
    webhookUrl: "https://test-webhook.example.com"
    tokenUrl: "https://test-token.example.com"
    tokenClientId: "abcdef"
    tokenSecret: "asdfgh"
  enableStrictCheckAcceptingInvitation: false
  # Measured in weeks number
  invitationDuration:
    individual: 3
    group: 3
  mastermindTemplating:
    mastermindTemplatesPath: "mastermind_templates/mastermind-templates.yaml"
    mastermindTemplates:
      users/invitation_notification_message.txt: |
          test
      users/invitation_notification_message.html: |
          <html>
          <head lang="en">
              <meta charset="UTF-8">
              <title>Invitation has been created</title>
          </head>
          <body>
          <p>
              Test
          </p>
          </body>
          </html>
  notifications:
    structure.notifications_profile_changes_operator: true
    structure.change_email_request: true
    structure.structure_role_granted: true
    users.invitation_created: true
    users.invitation_requested: true
    users.invitation_rejected: true
    users.invitation_approved: true
    users.permission_request_submitted: true
    booking.notification: true
    invoices.upcoming_ends_notification: true
    invoices.notification: false
    marketplace.notify_consumer_about_pending_order: true
    marketplace.notify_provider_about_pending_order: true
    marketplace.notification_usages: true
    marketplace.notification_about_stale_resources: true
    marketplace.marketplace_resource_update_succeeded: true
    marketplace.marketplace_resource_update_limits_succeeded: true
    marketplace.marketplace_resource_create_succeeded: true
    marketplace.notification_about_project_ending: true
    marketplace.marketplace_resource_update_limits_failed: true
    marketplace.marketplace_resource_update_failed: true
    marketplace.marketplace_resource_create_failed: true
    marketplace.marketplace_resource_terminate_succeeded: true
    marketplace.marketplace_resource_terminate_failed: true
    rancher.notification_create_user: true
    users.invitation_expired: true
    marketplace.marketplace_resource_termination_scheduled_staff: false
    marketplace.marketplace_resource_termination_scheduled: false
    marketplace_remote.notification_about_pending_project_updates: false
    marketplace_remote.notification_about_project_details_update: false
    marketplace_policy.notification_about_project_cost_exceeded_limit: false
  saml2:
    dir: "test/waldur_saml2"
    federations:
      - TAAT
      - EDUGAIN
      - HAKA_TEST
      - HAKA_PROD
  ssh_public_key_path: "test/ssh/id_rsa"
  ssh_private_key_path: "test/ssh/id_rsa.pub"
  homeport:
    imageName: "opennode/waldur-homeport"
    matomoUrlBase: ""
    matomoSiteId: ""
    customSentryURL: ""
    userMandatoryFields: {}
    userRegistrationHiddenFields: {}
    docsLink: "https://docs.waldur.com"
    invitationCivilCodeHelpText: ""
  metricsExporter:
    enabled: true
    includeAnnotations: false
  uvkEverypay:
    enabled: false
    imageTag: latest
    uvkServer: "https://uvk-test.ut.ee/client/a74/server.php?format=JSON&action=uvk__"
    everypayGateway: "https://igw-demo.every-pay.com/api/v4"
    everypayUsername: "abc"
    everypayPassword: "S0meP4ssw0rd?@#$"
    azureTenantID: ""
    azureClientID: ""
    azureClientSecret: ""
    azureScope: ""

bootstrap:
  enabled: true
  script: "bootstrap.sh"
  dir: "test/bootstrap"

networkPolicy:
  enabled: true

readonlyDBReplica:
  enabled: false
  replicaHost: "waldur-postgres-repl"

readonlyDB:
  enabled: false
  username: ""
  password: ""

externalDB:
  enabled: false
  flavor: "zalando"
  secretName: "waldur.waldur-testing-postgres.credentials.postgresql.acid.zalan.do"
  serviceName: "waldur-testing-postgres"

postgresql:
  enabled: false
  auth:
    username: "waldur"
    password: "waldur"
    database: "waldur"
  # The values are in use only if postgresql.enabled = true
  primary:
    persistence:
      size: "10Gi"
    resources:
      requests:
        memory: "1024Mi"
        cpu: "500m"
      limits:
        memory: "2048Mi"
        cpu: "1000m"
  image:
    tag: "16.4.0-debian-12-r19"
  metrics:
    enabled: true

postgresqlha:
  enabled: true
  postgresql:
    database: waldur
    username: waldur
    password: waldur
    postgresPassword: postgres
    repmgrPassword: repmgr
    replicaCount: 1
    image:
      tag: "16.4.0-debian-12-r26"
  pgpool:
    adminPassword: "2ILwp6GBDKNRMymXoDU="
    image:
      tag: "4.5.4-debian-12-r2"

postgresBackup:
  enabled: true
  schedule: "0 5 * * *"
  rotationSchedule: "0 6 * * 6"
  maxNumber: 10
  image: opennode/postgres-minio:0.1.0
  name: "waldur"

minio:
  accessKey: "accessKey"
  secretKey: "secret"
  bucketName: data
  ## min.io service endpoint used for communication inside a cluster
  endpoint: "http://minio:9000" ## See docs/service-endpoint.md for details.

rabbitmq:
  enabled: true
  auth:
    erlangCookie: "30ed8c5d20cadb62f491987d2e292848f8d35b26"
    username: "waldur"
    password: "waldur"
  # The values are in use only if rabbitmq.enabled = true
  image:
    repository: "bitnami/rabbitmq"
    tag: "4.0.2-debian-12-r0"
  replicaCount: 1
  resources:
    requests:
      cpu: 1
      memory: 512Mi
    limits:
      cpu: 2
      memory: 1024Mi
  extraContainerPorts:
  - name: mqtt
    containerPort: 1883
    protocol: TCP
  - name: mqtt-websocket
    containerPort: 15675
    protocol: TCP
  service:
    extraPorts:
    - name: mqtt
      protocol: TCP
      port: 1883
      targetPort: mqtt
    - name: mqtt-websocket
      protocol: TCP
      port: 15675
      targetPort: mqtt-websocket
  networkPolicy:
    extraIngress:
    - ports:
      - protocol: TCP
        containerPort: 1883
        port: 1883
      - protocol: TCP
        containerPort: 15675
        port: 15675
  persistence:
    enabled: true
    size: "10Gi"
    storageClass: ""
  clustering:
    forceBoot: true
  # hostname of rabbitmq service, respected only if rabbitmq.enabled = false and RMQ release is deployed separately
  host: "rmq-rabbitmq"

stressTesting:
  enabled: false
  locustFilePath: "locust_task/locust_test.py"

global:
  imageRegistry: "registry.hpc.ut.ee/mirror"
