apiVersion: v1
kind: ConfigMap
metadata:
  name: api-override-config
data:
  override.conf.py: |-
    #
    # Configuration for Waldur plugins
    #
    # Django
    #

    import os
    from datetime import timedelta

    SECRET_KEY = os.environ.get('GLOBAL_SECRET_KEY')

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRESQL_NAME'),
            'HOST': os.environ.get('POSTGRESQL_HOST'),
            'PORT': os.environ.get('POSTGRESQL_PORT'),
            'USER': os.environ.get('POSTGRESQL_USER'),
            'PASSWORD': os.environ.get('POSTGRESQL_PASSWORD'),
        },
    }

    {{- if .Values.readonlyDB.enabled }}
    # connection intended for /api/query/ requests
    DATABASES['readonly'] = {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRESQL_NAME'),
        'HOST': os.environ.get('POSTGRESQL_HOST'),
        'PORT': os.environ.get('POSTGRESQL_PORT'),
        'USER': os.environ.get('POSTGRESQL_READONLY_USER'),
        'PASSWORD': os.environ.get('POSTGRESQL_READONLY_PASSWORD'),
        'OPTIONS': {
            'options': '-c default_transaction_read_only=on'
        }
    }
    {{- end }}

    {{- if .Values.readonlyDBReplica.enabled }}
    DATABASES['read_db'] = {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRESQL_NAME'),
        'HOST': "{{ .Values.readonlyDBReplica.replicaHost }}",
        'PORT': os.environ.get('POSTGRESQL_PORT'),
        'USER': os.environ.get('POSTGRESQL_USER'),
        'PASSWORD': os.environ.get('POSTGRESQL_PASSWORD'),
        },
    }
    DATABASE_ROUTERS = [
    'waldur_core.core.database_routers.ReadOnlyReplicaRouter',
    ]
    {{- end }}

    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'waldur_cache',
        }
    }

    rabbitmq_host = os.environ.get('RABBITMQ_HOSTNAME')
    rabbitmq_port = 5672
    rabbitmq_username = os.environ.get('RABBITMQ_USERNAME')
    rabbitmq_password = os.environ.get('RABBITMQ_PASSWORD')

    CELERY_BROKER_URL = f"amqp://{rabbitmq_username}:{rabbitmq_password}@{rabbitmq_host}:{rabbitmq_port}"

    postgresql_host = os.environ.get('POSTGRESQL_HOST')
    postgresql_port = os.environ.get('POSTGRESQL_PORT')
    postgresql_user = os.environ.get('POSTGRESQL_USER')
    postgresql_password = os.environ.get('POSTGRESQL_PASSWORD')
    postgresql_name = 'celery_results'
    CELERY_RESULT_BACKEND = f'db+postgresql+psycopg://{postgresql_user}:{postgresql_password}@{postgresql_host}:{postgresql_port}/{postgresql_name}'

    RABBITMQ = {
        "HOST": {{ include "waldur.rabbitmq.rmqHost" . | quote }},
        {{ if .Values.waldur.rabbitmqEvents.mqttEnabled }}
        "MQTT_PORT": 1883,
        {{ else }}
        "MQTT_PORT": None,
        {{ end }}
        {{ if .Values.waldur.rabbitmqEvents.stompEnabled }}
        "STOMP_PORT": 61613,
        {{ else }}
        "STOMP_PORT": None,
        {{ end }}
        "USER": {{ .Values.rabbitmq.auth.username | quote }},
        "PASSWORD": {{ .Values.rabbitmq.auth.password | quote }},
        "MANAGEMENT_PORT": 15672,
    }

    EMAIL_HOST = '{{ .Values.waldur.mail.host }}'
    EMAIL_PORT = {{ .Values.waldur.mail.port | default 25 | int }}
    EMAIL_HOST_USER = '{{ .Values.waldur.mail.username | default "" }}'
    EMAIL_HOST_PASSWORD = '{{ .Values.waldur.mail.password | default "" }}'
    EMAIL_USE_TLS = {{ .Values.waldur.mail.useTLS | default "False" | camelcase }}

    {{ if .Values.waldur.notificationSubject }}
    WALDUR_CORE['NOTIFICATION_SUBJECT'] = '{{ .Values.waldur.notificationSubject }}'
    {{ end }}

    {{ if .Values.waldur.timeZone }}
    # Local time zone to use. See all at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    TIME_ZONE = '{{ .Values.waldur.timeZone }}'
    {{ end }}

    WALDUR_CORE['AUTHENTICATION_METHODS'] = {{ .Values.waldur.authMethods | toJson }}

    {{ if .Values.waldur.remoteEduteams }}
    WALDUR_AUTH_SOCIAL.update({
        'REMOTE_EDUTEAMS_REFRESH_TOKEN': os.environ.get("REMOTE_EDUTEAMS_REFRESH_TOKEN", '{{ .Values.waldur.remoteEduteams.refreshToken | default "" }}'),
        'REMOTE_EDUTEAMS_CLIENT_ID': os.environ.get("REMOTE_EDUTEAMS_CLIENT_ID", '{{ .Values.waldur.remoteEduteams.clientID | default "" }}'),
        'REMOTE_EDUTEAMS_SECRET': os.environ.get("REMOTE_EDUTEAMS_SECRET", '{{ .Values.waldur.remoteEduteams.clientSecret | default "" }}'),
        'REMOTE_EDUTEAMS_USERINFO_URL': os.environ.get("REMOTE_EDUTEAMS_USERINFO_URL", '{{ .Values.waldur.remoteEduteams.userinfoUrl | default "" }}'),
        'REMOTE_EDUTEAMS_TOKEN_URL': os.environ.get("REMOTE_EDUTEAMS_TOKEN_URL", '{{ .Values.waldur.remoteEduteams.tokenUrl | default "" }}'),
        'REMOTE_EDUTEAMS_SSH_API_URL': os.environ.get("REMOTE_EDUTEAMS_SSH_API_URL", '{{ .Values.waldur.remoteEduteams.sshApiUrl | default "" }}'),
        'REMOTE_EDUTEAMS_SSH_API_USERNAME': os.environ.get("REMOTE_EDUTEAMS_SSH_API_USERNAME", '{{ .Values.waldur.remoteEduteams.sshApiUsername | default "" }}'),
        'REMOTE_EDUTEAMS_SSH_API_PASSWORD': os.environ.get("REMOTE_EDUTEAMS_SSH_API_PASSWORD", '{{ .Values.waldur.remoteEduteams.sshApiPassword | default "" }}'),
        {{ if .Values.waldur.remoteEduteams.enableSync }}
        'ENABLE_EDUTEAMS_SYNC': True,
        {{ end }}
        {{ if and (.Values.waldur.remoteEduteams.clientID) (.Values.waldur.remoteEduteams.clientSecret) }}
        'REMOTE_EDUTEAMS_ENABLED': True,
        {{ end }}
    })
    {{ end }}

    {{ if has "LDAP" .Values.waldur.authMethods }}
    #
    # LDAP
    #
    import ldap
    from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

    # LDAP authentication.
    # See also: https://django-auth-ldap.readthedocs.io/en/latest/authentication.html
    AUTHENTICATION_BACKENDS += (
        'django_auth_ldap.backend.LDAPBackend',
    )

    AUTH_LDAP_SERVER_URI = '{{ .Values.waldur.ldap.host }}'

    # Following variables are not used by django-auth-ldap,
    # they are used as templates for other variables
    AUTH_LDAP_BASE = '{{ .Values.waldur.ldap.baseDN }}'
    AUTH_LDAP_USER_BASE = '{{ .Values.waldur.ldap.userDN }}'

    # Format authenticating user's distinguished name using template
    AUTH_LDAP_USER_DN_TEMPLATE = 'uid=%(user)s,' + AUTH_LDAP_USER_BASE

    # Credentials for admin user
    AUTH_LDAP_BIND_DN = 'uid={{ .Values.waldur.ldap.user }},' + AUTH_LDAP_USER_BASE
    AUTH_LDAP_BIND_PASSWORD = os.environ.get("AUTH_LDAP_BIND_PASSWORD", '{{ .Values.waldur.ldap.password | default "" }}')

    # Populate the Django user from the LDAP directory.
    AUTH_LDAP_USER_ATTR_MAP = {
        'full_name': 'displayName',
        'email': 'mail'
    }

    # Set up the basic group parameters.
    AUTH_LDAP_GROUP_BASE = "cn=groups," + AUTH_LDAP_BASE
    AUTH_LDAP_GROUP_FILTER = "(objectClass=groupOfNames)"
    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(AUTH_LDAP_GROUP_BASE,
        ldap.SCOPE_SUBTREE, AUTH_LDAP_GROUP_FILTER)
    AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")

    AUTH_LDAP_USER_FLAGS_BY_GROUP = {
        'is_staff': '{{ .Values.waldur.ldap.admins }},' + AUTH_LDAP_GROUP_BASE,
        'is_support': '{{ .Values.waldur.ldap.support }},' + AUTH_LDAP_GROUP_BASE,
    }
    {{ end }}


    {{ if (has "VALIMO" .Values.waldur.authMethods) }}
    WALDUR_AUTH_VALIMO.update({
        'AP_ID': '{{ .Values.waldur.valimo.apId }}',
        'AP_PWD': '{{ .Values.waldur.valimo.apPwd }}',
        'DNSName': '{{ .Values.waldur.valimo.dnsname }}',
        'cert_path': '/etc/waldur/valimo/valimo-client.crt',
        'key_path': '/etc/waldur/valimo/valimo-client.key',
        'URL': '{{ .Values.waldur.valimo.url }}',
        'SignatureProfile': '{{ .Values.waldur.valimo.signatureProfile }}',
    {{ if .Values.waldur.valimo.label }}
        'LABEL': '{{ .Values.waldur.valimo.label }}',
    {{ end }}
    {{ if .Values.waldur.valimo.mobilePrefix }}
        'MOBILE_PREFIX': '{{ .Values.waldur.valimo.mobilePrefix }}',
    {{ end }}
        'USER_MANAGEMENT_URL': '{{ .Values.waldur.valimo.managementUrl }}',
        'USER_PROTECTED_FIELDS': {{ .Values.waldur.valimo.protectedFields | toJson }},
    })
    {{ end }}

    #
    # waldur-core
    {{ if .Values.waldur.homeport.userMandatoryFields }}
    WALDUR_CORE["USER_MANDATORY_FIELDS"] = {{ .Values.waldur.homeport.userMandatoryFields | toJson }}
    {{ end }}

    {{ if .Values.waldur.homeport.userRegistrationHiddenFields }}
    WALDUR_CORE["USER_REGISTRATION_HIDDEN_FIELDS"] = {{ .Values.waldur.homeport.userRegistrationHiddenFields | toJson }}
    {{ end }}

    {{ if has "create_default_project_on_organization_creation" .Values.waldur.features }}
    WALDUR_CORE['CREATE_DEFAULT_PROJECT_ON_ORGANIZATION_CREATION'] = True
    {{ end }}

    {{ if has "only_staff_can_invite_users" .Values.waldur.features }}
    WALDUR_CORE['ONLY_STAFF_CAN_INVITE_USERS'] = True
    {{ end }}

    {{ if has "invitation_create_missing_users" .Values.waldur.features }}
    WALDUR_CORE['INVITATION_CREATE_MISSING_USER'] = True
    {{ end }}

    {{ if has "invitation_disable_multiple_roles" .Values.waldur.features }}
    WALDUR_CORE['INVITATION_DISABLE_MULTIPLE_ROLES'] = True
    {{ end }}

    {{ if has "invitation_use_webhooks" .Values.waldur.features }}
    WALDUR_CORE["INVITATION_USE_WEBHOOKS"] = True
    WALDUR_CORE["INVITATION_WEBHOOK_URL"] = {{ default "" .Values.waldur.customInvitations.webhookUrl | quote }}
    WALDUR_CORE["INVITATION_WEBHOOK_TOKEN_URL"] = {{ default "" .Values.waldur.customInvitations.tokenUrl | quote }}
    WALDUR_CORE["INVITATION_WEBHOOK_TOKEN_CLIENT_ID"] = {{ default "" .Values.waldur.customInvitations.tokenClientId | quote }}
    WALDUR_CORE["INVITATION_WEBHOOK_TOKEN_SECRET"] = {{ default "" .Values.waldur.customInvitations.tokenSecret | quote }}
    {{ end }}

    {{ if and (hasKey .Values.waldur "serviceAccountApiIntegration") (.Values.waldur.serviceAccountApiIntegration.enabled) }}
    WALDUR_CORE["SERVICE_ACCOUNT_USE_API"] = True
    WALDUR_CORE["SERVICE_ACCOUNT_TOKEN_URL"] = {{ .Values.waldur.serviceAccountApiIntegration.tokenUrl | quote }}
    WALDUR_CORE["SERVICE_ACCOUNT_URL"] = {{ .Values.waldur.serviceAccountApiIntegration.managementUrl | quote }}
    WALDUR_CORE["SERVICE_ACCOUNT_TOKEN_CLIENT_ID"] = {{ .Values.waldur.serviceAccountApiIntegration.tokenClientId | quote }}
    WALDUR_CORE["SERVICE_ACCOUNT_TOKEN_SECRET"] = {{ .Values.waldur.serviceAccountApiIntegration.tokenSecret | quote }}
    {{ end }}

    {{ if and (hasKey .Values.waldur "courseAccountApiIntegration") (.Values.waldur.courseAccountApiIntegration.enabled) }}
    WALDUR_CORE["ENABLE_PROJECT_KIND_COURSE"] = True
    WALDUR_CORE["COURSE_ACCOUNT_USE_API"] = True
    WALDUR_CORE["COURSE_ACCOUNT_TOKEN_URL"] = {{ .Values.waldur.courseAccountApiIntegration.tokenUrl | quote }}
    WALDUR_CORE["COURSE_ACCOUNT_URL"] = {{ .Values.waldur.courseAccountApiIntegration.managementUrl | quote }}
    WALDUR_CORE["COURSE_ACCOUNT_TOKEN_CLIENT_ID"] = {{ .Values.waldur.courseAccountApiIntegration.tokenClientId | quote }}
    WALDUR_CORE["COURSE_ACCOUNT_TOKEN_SECRET"] = {{ .Values.waldur.courseAccountApiIntegration.tokenSecret | quote }}
    {{ end }}

    {{ if has "protect_freeipa_user_details" .Values.waldur.features }}
    WALDUR_CORE['PROTECT_USER_DETAILS_FOR_REGISTRATION_METHODS'] = ['FREEIPA']
    {{ end }}

    {{ if has "protect_keycloak_user_details" .Values.waldur.features }}
    WALDUR_CORE['PROTECT_USER_DETAILS_FOR_REGISTRATION_METHODS'].append('keycloak')
    {{ end }}

    {{ if has "enable_accounting_start_date" .Values.waldur.features }}
    WALDUR_CORE['ENABLE_ACCOUNTING_START_DATE'] = True
    {{ end }}

    {{ if .Values.waldur.homeport.matomoUrlBase }}
    WALDUR_CORE['MATOMO_URL_BASE'] = {{ .Values.waldur.homeport.matomoUrlBase | quote }}
    {{ end }}

    {{ if .Values.waldur.homeport.matomoSiteId }}
    WALDUR_CORE['MATOMO_SITE_ID'] = {{ .Values.waldur.homeport.matomoSiteId | quote }}
    {{ end }}

    #
    # waldur-mastermind
    #
    {{ if has "billing" .Values.waldur.features }}
    WALDUR_INVOICES['ISSUER_DETAILS'].update({
        'company': '{{ .Values.waldur.invoice.company }}',
        'address': '{{ .Values.waldur.invoice.address }}',
        'country': '{{ .Values.waldur.invoice.country }}',
        'email': '{{ .Values.waldur.invoice.email }}',
        'postal': '{{ .Values.waldur.invoice.postalCode }}',
        'phone': {
            'country_code': '{{ .Values.waldur.invoice.phoneCountryCode }}',
            'national_number': '{{ .Values.waldur.invoice.phoneNationalNumber }}',
        },
        'bank': '{{ .Values.waldur.invoice.bank }}',
        'account': '{{ .Values.waldur.invoice.bankAccount }}',
        'vat_code': '{{ .Values.waldur.invoice.vatCode }}',
    })
    {{ end }}

    {{ if has "send_customer_invoices" .Values.waldur.features }}
    WALDUR_INVOICES['SEND_CUSTOMER_INVOICES'] = True
    {{ end }}

    {{ if .Values.waldur.paymentInterval }}
    WALDUR_INVOICES['PAYMENT_INTERVAL'] = {{ .Values.waldur.invoice.paymentInterval }}
    {{ end }}

    # Enable reporting of accounting data
    {{ if .Values.waldur.invoice_reporting.enabled }}
    WALDUR_INVOICES['INVOICE_REPORTING'].update({
        'ENABLE': True,
        'EMAIL': '{{ .Values.waldur.invoice_reporting.email }}',
        'USE_SAP': True,
        'SAP_PARAMS': {
            'KM_KOOD': '{{ .Values.waldur.invoice_reporting.sap_params.km_kood }}',
            'ORG_CODE': '{{ .Values.waldur.invoice_reporting.sap_params.org_code }}',
            'MAKSET': '{{ .Values.waldur.invoice_reporting.sap_params.makset }}',
            'FUNKA': '{{ .Values.waldur.invoice_reporting.sap_params.funka }}',
            'FUND': '{{ .Values.waldur.invoice_reporting.sap_params.fund }}',
            'EELUKS': '{{ .Values.waldur.invoice_reporting.sap_params.eeluks }}',
            'KULUUKSUS': '{{ .Values.waldur.invoice_reporting.sap_params.kuluuksus }}',
        },
    })
    {{ end }}

    {{ if has "slurm" .Values.waldur.features }}
    # See also http://docs.waldur.com/SLURM+plugin+configuration
    WALDUR_SLURM.update({
        'ENABLED': True,
        'CUSTOMER_PREFIX': '{{ .Values.waldur.slurm.customerPrefix }}',
        'PROJECT_PREFIX': '{{ .Values.waldur.slurm.projectPrefix }}',
        'ALLOCATION_PREFIX': '{{ .Values.waldur.slurm.allocationPrefix }}',
    })
    {{ end }}
    #
    # waldur-openstack
    #
    {{ if has "show_openstack_credentials" .Values.waldur.features }}
    WALDUR_OPENSTACK.update({
        'TENANT_CREDENTIALS_VISIBLE': True,  # enable display of OpenStack credentials to users
    })
    {{ else }}
    WALDUR_OPENSTACK.update({
        'TENANT_CREDENTIALS_VISIBLE': False,  # disable display of OpenStack credentials to users
    })
    {{ end }}

    {{ if has "allow_direct_external_network_connection" .Values.waldur.features }}
    WALDUR_OPENSTACK.update({
        'ALLOW_DIRECT_EXTERNAL_NETWORK_CONNECTION': True,
    })
    {{ end }}

    {{ if (has "show_openstack_console" .Values.waldur.features) }}
    WALDUR_OPENSTACK.update({
        'ALLOW_CUSTOMER_USERS_OPENSTACK_CONSOLE_ACCESS': True,
    })
    {{ end }}

    {{ if (has "disable_openstack_private_offering_creation" .Values.waldur.features) }}
    WALDUR_MARKETPLACE_OPENSTACK.update({
        'AUTOMATICALLY_CREATE_PRIVATE_OFFERING': False,
    })
    {{ end }}

    {{ if (has "paypal" .Values.waldur.features) }}
    #
    # waldur-paypal
    #

    # See also http://docs.waldur.com/PayPal+plugin+configuration
    WALDUR_PAYPAL.update({
        'ENABLED': True,
        'BACKEND': {
            'mode': 'live',
            'client_id': '{{ .Values.waldur.paypal.clientId }}',
            'client_secret': os.environ.get("PAYPAL_SECRET", '{{ .Values.waldur.paypal.secret | default "" }})',
            'currency_name': 'EUR',
        }
    })
    {{ end }}

    {{ if .Values.waldur.mail.from }}
    DEFAULT_FROM_EMAIL = '{{ .Values.waldur.mail.from }}'
    {{ end }}

    {{ if .Values.waldur.mail.hookFrom }}
    EMAIL_HOOK_FROM_EMAIL = '{{ .Values.waldur.mail.hookFrom }}'
    {{ end }}

    {{ if .Values.waldur.mail.replyTo }}
    DEFAULT_REPLY_TO_EMAIL = '{{ .Values.waldur.mail.replyTo }}'
    {{ end }}

    {{ if .Values.waldur.languageChoices }}
    LANGUAGE_CHOICES = (
        "en",
    {{- range .Values.waldur.languageChoices }}
    {{ . | quote | indent 4 }},
    {{- end }}
    )
    {{ end }}


    {{ if has "pid_datacite" .Values.waldur.features }}
    WALDUR_PID['DATACITE'].update({
        'REPOSITORY_ID': '{{ .Values.waldur.pid_datacite.repository_id }}',
        'PASSWORD': '{{ .Values.waldur.pid_datacite.password }}',
        'PREFIX': '{{ .Values.waldur.pid_datacite.prefix }}',
        'API_URL': '{{ .Values.waldur.pid_datacite.url }}',
        'PUBLISHER': '{{ .Values.waldur.pid_datacite.publisher }}',
        'COLLECTION_DOI': '{{ .Values.waldur.pid_datacite.collection_doi }}',
    })
    {{ end }}

    {{ if has "academic_domain" .Values.waldur.features }}
    WALDUR_CORE["TRANSLATION_DOMAIN"] = "academic"
    {{ end }}

    {{ if has "academic_shared_domain" .Values.waldur.features }}
    WALDUR_CORE["TRANSLATION_DOMAIN"] = "academic_shared"
    {{ end }}

    {{ if .Values.waldur.defaultLanguage }}
    LANGUAGE_CODE = {{ .Values.waldur.defaultLanguage | quote }}
    {{ end }}

    {{ if .Values.waldur.homeport.invitationCivilCodeHelpText }}
    WALDUR_CORE["INVITATION_CIVIL_CODE_HELP_TEXT"] = {{ .Values.waldur.homeport.invitationCivilCodeHelpText | quote }}
    {{ end }}

    {{ if .Values.waldur.sentryDSN }}
    WALDUR_CORE["HOMEPORT_SENTRY_DSN"] = {{ .Values.waldur.sentryDSN | quote }}
    {{ end }}

    WALDUR_CORE["HOMEPORT_SENTRY_ENVIRONMENT"] = os.environ.get("SENTRY_ENVIRONMENT", "production")

    WALDUR_CORE.update({
        'LOCAL_IDP_NAME': '{{ .Values.waldur.localIdp.name }}',
        'LOCAL_IDP_LABEL': '{{ .Values.waldur.localIdp.label }}',
        'LOCAL_IDP_MANAGEMENT_URL': '{{ .Values.waldur.localIdp.managementUrl }}',
        'LOCAL_IDP_PROTECTED_FIELDS': {{ .Values.waldur.localIdp.protectedFields | toJson }},
    })

    {{ if .Values.waldur.overrideSubnetBlacklist }}
    WALDUR_CORE['SUBNET_BLACKLIST'] = {{ .Values.waldur.overrideSubnetBlacklist | toJson }}
    {{ end }}

    {{ if .Values.waldur.mastermindUrl }}
    WALDUR_CORE["MASTERMIND_URL"] = {{ .Values.waldur.mastermindUrl | quote }}
    {{ end }}

    WALDUR_CORE['INVITATION_LIFETIME'] = timedelta(weeks={{ default 1 .Values.waldur.invitationDuration.individual }})
    WALDUR_CORE['GROUP_INVITATION_LIFETIME'] = timedelta(weeks={{ default 1 .Values.waldur.invitationDuration.group }})
